{"version":3,"sources":["components/Layouts/header.js","components/Layouts/footer.js","components/Exercises/index.js","store.js","components/App.js","serviceWorker.js","index.js"],"names":["AppBar","position","Toolbar","Typography","variant","component","color","muscles","category","onSelect","index","findIndex","group","console","log","Paper","square","Tabs","value","onChange","e","indicatorColor","textColor","centered","Tab","label","map","key","style","paper","padding","marginTop","marginBottom","height","overflow","exercises","excercise","id","title","description","Grid","container","spacing","item","xs","textTransform","List","ListItem","button","onClick","ListItemText","primary","App","state","getExcerciseByMuscles","reduce","exercise","handleSelectedCatg","setState","handleSelectedExcercise","find","ex","Object","entries","this","Exercises","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3f8202c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {AppBar, Toolbar, Typography } from '@material-ui/core'\r\n\r\nexport default () => {\r\n    return(\r\n        <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button> */}\r\n          <Typography variant=\"h5\" component=\"h6\" color=\"inherit\">\r\n          Excercises Database\r\n            </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Paper,Tabs,Tab} from '@material-ui/core';\r\n\r\n\r\nexport default ({muscles, category, onSelect}) => {\r\n\r\n  const index = category ? muscles.findIndex(group => group === category) + 1 : 0\r\n  console.log(index);\r\n\r\n  const onIndexSelect = (e, index) => {\r\n    onSelect(index === 0 ? '' : muscles[index - 1])\r\n    console.log(index);\r\n    console.log(e);\r\n  }\r\n\r\nreturn(\r\n  <Paper square={true}>\r\n    <Tabs\r\n      value={index}\r\n      onChange={onIndexSelect}\r\n      indicatorColor=\"primary\"\r\n      textColor=\"primary\"\r\n      centered\r\n    >\r\n      <Tab label=\"All\" />\r\n      { muscles.map(category => \r\n      <Tab key={category} label={category} />)}\r\n    </Tabs>\r\n  </Paper>\r\n  )\r\n}","import React, { Fragment } from \"react\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  ListItem,\r\n  List,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\n\r\nconst style = {\r\n  paper: {\r\n    padding: 20,\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n    height:500,\r\n    overflow:'auto'\r\n  }\r\n};\r\n\r\nexport default ({ \r\n    exercises,\r\n    category,\r\n    onSelect,\r\n    excercise:{id, title=\"Welcome\", description=\"Select which muscle you wanna build.\"} \r\n}) => (\r\n  <Grid container spacing={2}>\r\n    <Grid item xs>\r\n      <Paper style={style.paper} square={true}>\r\n        {exercises.map(([muscles, exercises]) => (\r\n         !category || category === muscles \r\n         ?\r\n     \r\n         <Fragment key={muscles}>\r\n            <Typography\r\n              variant=\"h5\"\r\n              component=\"h5\"\r\n              style={{ textTransform: \"capitalize\" }}\r\n            >\r\n              {muscles}\r\n            </Typography>\r\n            <List component=\"ul\">\r\n              {exercises.map(({title, id}) => (\r\n                <ListItem \r\n                key={id}\r\n                button\r\n                onClick={() => {\r\n                    return onSelect(id);\r\n                }}\r\n                >\r\n                  <ListItemText \r\n                  primary={title} \r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Fragment>\r\n          : null\r\n        ))}\r\n      </Paper>\r\n    </Grid>\r\n    <Grid item xs>\r\n      <Paper style={style.paper} square={true}>\r\n        <Typography variant='h4'>\r\n            {title}\r\n        </Typography>\r\n        <Typography variant='h6' style={{marginTop:20}}>\r\n            {description}\r\n        </Typography>\r\n      </Paper>\r\n    </Grid>\r\n  </Grid>\r\n);\r\n","export const muscles = [\r\n    'shoulders', 'chest', 'arms', 'back', 'legs'\r\n  ]\r\n  \r\n  export const exercises = [\r\n    {\r\n      id: 'overhead-press',\r\n      title: 'Overhead Press',\r\n      description: 'Delts exercise...',\r\n      muscles: 'shoulders'\r\n    },\r\n    {\r\n      id: 'dips',\r\n      title: 'Dips',\r\n      description: 'Triceps exercise...',\r\n      muscles: 'arms'\r\n    },\r\n    {\r\n      id: 'barbell-curls',\r\n      title: 'Barbell Curls',\r\n      description: 'Biceps exercise...',\r\n      muscles: 'arms'\r\n    },\r\n    {\r\n      'id': 'bench-press',\r\n      title: 'Bench Press',\r\n      description: 'Chest exercise...',\r\n      muscles: 'chest'\r\n    },\r\n    {\r\n      id: 'pull-ups',\r\n      title: 'Pull Ups',\r\n      description: 'Back and biceps exercise...',\r\n      muscles: 'back'\r\n    },\r\n    {\r\n      id: 'deadlifts',\r\n      title: 'Deadlifts',\r\n      description: 'Back and leg exercise...',\r\n      muscles: 'back'\r\n    },\r\n    {\r\n      id: 'squats',\r\n      title: 'Squats',\r\n      description: 'Legs exercise...',\r\n      muscles: 'legs'\r\n    },\r\n  ]","import React, { Component, Fragment } from 'react';\nimport {Header, Footer} from './Layouts';\nimport Exercises from './Exercises';\nimport {muscles, exercises} from '../store'\n\n\nclass App extends Component {\n  state = { \n    exercises,\n    category: '',\n    excercise: {}\n   }\n\n   getExcerciseByMuscles = () =>{\n     return this.state.exercises.reduce((exercises, exercise)=>{\n       const {muscles} = exercise\n       \n         exercises[muscles] = exercises[muscles]\n          ? [...exercises[muscles], exercise]\n          :[exercise] \n\n          return exercises\n     }, {})\n   }\n\n   handleSelectedCatg = (category) => {\n     this.setState({category})\n   }\n\n   handleSelectedExcercise = (id) => {\n      this.setState(({exercises}) => ({\n          excercise : exercises.find(ex => ex.id === id)\n        })\n      )\n   }\n\n   \n  render() { \n     const exercises = Object.entries(this.getExcerciseByMuscles());\n    const {category, excercise} = this.state\n    return ( \n      <Fragment>\n        <Header />\n        <Exercises \n        exercises={exercises} \n        excercise={excercise}\n        category={category} \n        onSelect={this.handleSelectedExcercise} />\n        <Footer muscles={muscles} onSelect={this.handleSelectedCatg} category={category} />\n      </Fragment>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}